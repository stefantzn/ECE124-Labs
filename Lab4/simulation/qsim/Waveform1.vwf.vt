// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2024 18:13:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          LogicalStep_Lab4_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LogicalStep_Lab4_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clkin_50;
reg [3:0] pb_n;
reg rst_n;
reg [7:0] sw;
// wires                                               
wire [7:0] leds;
wire seg7_char1;
wire seg7_char2;
wire [6:0] seg7_data;

// assign statements (if any)                          
LogicalStep_Lab4_top i1 (
// port map - connection between master ports and signals/registers   
	.clkin_50(clkin_50),
	.leds(leds),
	.pb_n(pb_n),
	.rst_n(rst_n),
	.seg7_char1(seg7_char1),
	.seg7_char2(seg7_char2),
	.seg7_data(seg7_data),
	.sw(sw)
);
initial 
begin 
#1000000 $finish;
end 

// clkin_50
always
begin
	clkin_50 = 1'b0;
	clkin_50 = #10000 1'b1;
	#10000;
end 

// pb_n[1]
initial
begin
	pb_n[1] = 1'b1;
	pb_n[1] = #40000 1'b0;
	pb_n[1] = #140000 1'b1;
end 

// pb_n[0]
initial
begin
	pb_n[0] = 1'b1;
	pb_n[0] = #40000 1'b0;
	pb_n[0] = #140000 1'b1;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
	rst_n = #220000 1'b0;
	rst_n = #200000 1'b1;
end 
endmodule

