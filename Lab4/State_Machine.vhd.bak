library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

Entity State_Machine_Example IS Port
(
 clk_input, reset, sm_clken			: IN std_logic;
 ns_green, ns_amber, ns_red, ew_green, ew_amber, ew_red, 						: OUT std_logic
 );
END ENTITY;
 

 Architecture SM of State_Machine_Example is
 
 

 
 TYPE STATE_NAMES IS (S0, S1, S2, S3, S4, S5, S6, S7. S8, S9, S10, S11, S12, S13, S14, S15);   -- list all the STATE_NAMES values

 
 SIGNAL current_state, next_state	:  STATE_NAMES;     	-- signals of type STATE_NAMES


 BEGIN
 

 -------------------------------------------------------------------------------
 --State Machine:
 -------------------------------------------------------------------------------

 -- REGISTER_LOGIC PROCESS EXAMPLE
 
Register_Section: PROCESS (clk_input)  -- this process updates with a clock
BEGIN
	IF(rising_edge(clk_input)) THEN
		IF (reset = '1') THEN
			current_state <= S0;
		ELSIF (reset = '0' and sm_clken = '1') THEN
			current_state <= next_State;
		END IF;
	END IF;
END PROCESS;	



-- TRANSITION LOGIC PROCESS EXAMPLE

Transition_Section: PROCESS (I0, I1, I2, current_state) 

BEGIN
  CASE current_state IS
        WHEN S0 =>		
				next_state <= S1;
        WHEN S1 =>		
				next_state <= S2;
        WHEN S2 =>		
				next_state <= S3;
		  WHEN S3 =>		
				next_state <= S4;
		  WHEN S4 =>		
				next_state <= S5;
		  WHEN S5 =>		
				next_state <= S6;
		  WHEN S6 =>		
				next_state <= S7;
		  WHEN S7 =>		
				next_state <= S8;
		  WHEN S8 =>		
				next_state <= S9;
		  WHEN S9 =>		
				next_state <= S10;
		  WHEN S10 =>		
				next_state <= S11;
		  WHEN S11 =>		
				next_state <= S12;
		  WHEN S12 =>		
				next_state <= S13;
		  WHEN S13 =>		
				next_state <= S14;
		  WHEN S14 =>		
				next_state <= S15;
		  WHEN S15 =>		
				next_state <= S0;
	  END CASE;
 END PROCESS;
 

-- DECODER SECTION PROCESS EXAMPLE (MOORE FORM SHOWN)

Decoder_Section: PROCESS (current_state) 

BEGIN
     CASE current_state IS
	  
         WHEN S0 | S1 =>		
			ns_green <= '0';
			ns_amber <= '0';
			ns_red <= '0';
			
			ew_green <= '0';
			ew_amber <= '0';
			ew_red <= '0';
			
         WHEN S2 | S3 | S4 | S5 =>		
			ns_green <= '1';
			ns_amber <= '0';
			ns_red <= '0';
			
			ew_green <= '0';
			ew_amber <= '0';
			ew_red <= '0';
			
         WHEN S6 | S7 =>		
			ns_green <= '0';
			ns_amber <= '1';
			ns_red <= '0';
			
			ew_green <= '0';
			ew_amber <= '0';
			ew_red <= '0';
			
         WHEN others =>		
 			ns_green <= '0';
			ns_amber <= '0';
			ns_red <= '1';
			
 			ew_green <= '0';
			ew_amber <= '0';
			ew_red <= '0';
			
	  END CASE;
 END PROCESS;

 END ARCHITECTURE SM;
